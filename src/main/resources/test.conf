timeseries {
  s3-host = "n/a"
  s3-port = "n/a"
  s3-use-ssl = "n/a"
  s3-base-url = "src/test/resources/"

  parallelism = 8

  throttle {
    items = 100
    period = 1
  }

  bind-port = 8080
  bind-address = "0.0.0.0"

  query-limit = 100000

  # some other timeout is kicking in at 60 seconds, which prevents us from shutting down properly
  idle-timeout = 2m
  default-gap-threshold = 2.0
  request-queue-size = 100

  send-spike-threshold = 10

  cors {
    allowed-origins = "localhost"
  }
}

custom-io-dispatcher {
  # Dispatcher is the name of the event-based dispatcher
  type = Dispatcher

  ///type =PinnedDispatcher
  # What kind of ExecutionService to use
  executor = "thread-pool-executor"

  thread-pool-executor {

    # minimum number of threads to cap factor-based core number to
    core-pool-size-min = 2

    # No of core threads ... ceil(available processors * factor)
    core-pool-size-factor = 8.0

    # maximum number of threads to cap factor-based number to
    core-pool-size-max = 10
  }

  # Throughput defines the maximum number of messages to be
  # processed per actor before the thread jumps to the next actor.
  # Set to 1 for as fair as possible.
  throughput = 100
}

akka {
  loglevel = "INFO"

  stream = {
    debug-logging = on
  }
}

jwt-key = "key"

postgresTS {
  db {
    default {
      url="jdbc:postgresql://"${data.postgres.host}":"${data.postgres.port}"/"${data.postgres.database}
      user=${data.postgres.user}
      password=${data.postgres.password}
    }
  }
}

data {
  postgres {
    database="data_postgres"
    host="postgres"
    password="password"
    port=5432
    user="postgres"
  }
}

postgres {
  database="pennsieve_postgres"
  host="postgres"
  password="password"
  port=5432
  user="postgres"
}

discover-api {
    host="https://api.pennsieve.net/discover/"
}